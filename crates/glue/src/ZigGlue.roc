app "zig-glue"
    packages { pf: "../platform/main.roc" }
    imports [
        pf.Types.{ Types },
        pf.File.{ File },
    ]
    provides [makeGlue] to pf

makeGlue : List Types -> Result (List File) Str
makeGlue = \typesByArch ->
    typesByArch
    |> List.map convertTypesToFile
    |> Ok

convertTypesToFile : Types -> File
convertTypesToFile = \types ->
    parts =
        Types.walkShapes types [] \state, type, id ->
            when type is
                RocStr ->
                    List.append
                        state
                        """
                        pub const RocStr = @import("glue").str.RocStr;
                        """

                TagUnion union ->
                    when union is
                        Enumeration { name, tags } ->
                            zigTags =
                                List.map
                                    tags
                                    (\tag ->
                                        tag
                                        |> toLower
                                        |> Str.concat ",\n"
                                    )
                                |> Str.joinWith ""

                            enum =
                                """
                                pub const \(name) = enum(c_int){
                                    \(zigTags)
                                };
                                """
                            List.append state enum

                        _ -> state

                _ ->
                    state

    content = Str.concat fileHeader (Str.joinWith parts "\n\n")

    {
        name: "glue.zig",
        content: content,
    }

fileHeader =
    """
    // ⚠️ GENERATED CODE ⚠️ - this entire file was generated by the `roc glue` CLI command


    """

toLower : Str -> Str
toLower = \str ->
    # TODO: This does only work for ascii
    str
    |> Str.toUtf8
    |> List.map \c ->
        if c >= 'A' && c <= 'Z' then
            c - 'A' + 'a'
        else
            c
    |> Str.fromUtf8
    |> Result.withDefault "non ascii not supported"
